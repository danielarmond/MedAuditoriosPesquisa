// <auto-generated />
using System;
using MedAuditoriosPesquisa.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedAuditoriosPesquisa.Migrations
{
    [DbContext(typeof(MedAuditoriosPesquisaContext))]
    [Migration("20231222135200_IdentityTables")]
    partial class IdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedAuditoriosPesquisa.Models.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Filial");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Belo Horizonte (MG)"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "São Paulo (SP)"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Rio de Janeiro (RJ)"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Salvador (BA)"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Porto Alegre (RS)"
                        });
                });

            modelBuilder.Entity("MedAuditoriosPesquisa.Models.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInteracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailContato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("LinkVisita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("NomeContato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeDireito")
                        .HasColumnType("int");

                    b.Property<int>("StatusPrimarioId")
                        .HasColumnType("int");

                    b.Property<int>("StatusSecundarioId")
                        .HasColumnType("int");

                    b.Property<int>("TelefoneContato")
                        .HasColumnType("int");

                    b.Property<int>("TipoCadeira")
                        .HasColumnType("int");

                    b.Property<string>("UrlImagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("StatusPrimarioId");

                    b.HasIndex("StatusSecundarioId");

                    b.ToTable("Local");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacidade = 400,
                            DataInteracao = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailContato = "jorge@jorge.com.br",
                            FilialId = 1,
                            LinkVisita = "https://trello.com/",
                            Nome = "Colégio CRA",
                            NomeContato = "Jorge",
                            Observacao = "Ótimo local",
                            PeDireito = 5,
                            StatusPrimarioId = 1,
                            StatusSecundarioId = 1,
                            TelefoneContato = 21,
                            TipoCadeira = 2,
                            UrlImagem = "https://conceitos.com/wp-content/uploads/cultura/Auditorio.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Capacidade = 200,
                            DataInteracao = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailContato = "laura@laura.com.br",
                            FilialId = 2,
                            LinkVisita = "https://trello.com/",
                            Nome = "Hotel Golden Tulip",
                            NomeContato = "Laura",
                            Observacao = "Péssimo local",
                            PeDireito = 4,
                            StatusPrimarioId = 2,
                            StatusSecundarioId = 2,
                            TelefoneContato = 21,
                            TipoCadeira = 3,
                            UrlImagem = "https://www.proacustica.org.br/assets/images/Publicacoes/Cases/AuditorioCNC_001.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Capacidade = 350,
                            DataInteracao = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailContato = "antônio@antônio.com.br",
                            FilialId = 3,
                            LinkVisita = "https://trello.com/",
                            Nome = "Colégio Batista",
                            NomeContato = "Antônio",
                            Observacao = "Achei feio.",
                            PeDireito = 5,
                            StatusPrimarioId = 3,
                            StatusSecundarioId = 3,
                            TelefoneContato = 251,
                            TipoCadeira = 2,
                            UrlImagem = "https://www.univates.br/eventos//media/alugue/auditorios/aud_7_01.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Capacidade = 700,
                            DataInteracao = new DateTime(2023, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailContato = "malaquias@malaquias.com.br",
                            FilialId = 4,
                            LinkVisita = "https://trello.com/",
                            Nome = "Teatro Morumbi",
                            NomeContato = "Malaquias",
                            Observacao = "Perfeito. Aprovado pra tudo.",
                            PeDireito = 8,
                            StatusPrimarioId = 4,
                            StatusSecundarioId = 4,
                            TelefoneContato = 21,
                            TipoCadeira = 0,
                            UrlImagem = "https://ama-al.com.br/wp-content/uploads/2021/09/MK36029-2.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Capacidade = 200,
                            DataInteracao = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailContato = "ramses@silva.com.br",
                            FilialId = 5,
                            LinkVisita = "https://trello.com/",
                            Nome = "Cinema Carioca",
                            NomeContato = "Ramses",
                            Observacao = "Ótimo local",
                            PeDireito = 3,
                            StatusPrimarioId = 5,
                            StatusSecundarioId = 5,
                            TelefoneContato = 21,
                            TipoCadeira = 2,
                            UrlImagem = "https://images.adsttc.com/media/images/5f7d/feb4/63c0/1772/3f00/0340/slideshow/Marcus_Wend_3.jpg?1602092715"
                        });
                });

            modelBuilder.Entity("MedAuditoriosPesquisa.Models.StatusPrimario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StatusPrimario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Aguardando Retorno do Local"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Aguardando Visita"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Aprovado sem Restrições"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Aprovado com Restrições"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Backup"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Banco de Dados"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Lista restrita"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Contato Sem Sucesso"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Local Atual"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Local Potencial"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "Não Aluga"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Não Existe na Cidade"
                        },
                        new
                        {
                            Id = 13,
                            Nome = "Não Possui Auditório"
                        },
                        new
                        {
                            Id = 14,
                            Nome = "Reprovado"
                        },
                        new
                        {
                            Id = 15,
                            Nome = "Sem Contato"
                        });
                });

            modelBuilder.Entity("MedAuditoriosPesquisa.Models.StatusSecundario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StatusSecundario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Reprovado Capacidade"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Acessibilidade"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Capacidade"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Infraestrutura"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Localização / Segurança"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Não Atende"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Ocupado"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Responsável Não Está"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Telefone Errado / FAX"
                        });
                });

            modelBuilder.Entity("MedAuditoriosPesquisa.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Funcao")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "daniel.armond@rmedcursosmedicos.com.br",
                            Funcao = 2,
                            Nome = "Daniel Armond",
                            Senha = "root"
                        },
                        new
                        {
                            Id = 2,
                            Email = "aline.inojosa@rmedcursosmedicos.com.br",
                            Funcao = 1,
                            Nome = "Aline Inojosa",
                            Senha = "medaline123"
                        },
                        new
                        {
                            Id = 3,
                            Email = "joao.gomes@rmedcursosmedicos.com.br",
                            Funcao = 0,
                            Nome = "João Gomes",
                            Senha = "medjoao123"
                        },
                        new
                        {
                            Id = 4,
                            Email = "michele.bhering@rmedcursosmedicos.com.br",
                            Funcao = 1,
                            Nome = "Michele Bhering",
                            Senha = "medmichele123"
                        },
                        new
                        {
                            Id = 5,
                            Email = "alana.nascimento@rmedcursosmedicos.com.br",
                            Funcao = 1,
                            Nome = "Alana Nascimento",
                            Senha = "medalana123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedAuditoriosPesquisa.Models.Local", b =>
                {
                    b.HasOne("MedAuditoriosPesquisa.Models.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedAuditoriosPesquisa.Models.StatusPrimario", "StatusPrimario")
                        .WithMany()
                        .HasForeignKey("StatusPrimarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedAuditoriosPesquisa.Models.StatusSecundario", "StatusSecundario")
                        .WithMany()
                        .HasForeignKey("StatusSecundarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("StatusPrimario");

                    b.Navigation("StatusSecundario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
